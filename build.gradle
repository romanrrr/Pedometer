buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
    dependencies {
        if (rootProject.ext.has("gradle_classpath")) {
            classpath rootProject.ext.gradle_classpath
        } else {
            logger.warn('classpath not found in rootProject')
            classpath 'com.android.tools.build:gradle:3.0.1'
        }
    }
}

apply plugin: 'com.android.application'

android {

    if (rootProject.ext.has("compileSdkVersion")) {
        compileSdkVersion rootProject.ext.compileSdkVersion
        buildToolsVersion rootProject.ext.buildToolsVersion
    } else {
        logger.warn('compileSdkVersion not found in rootProject')
        compileSdkVersion = 26
        buildToolsVersion = "26.0.2"
    }

    defaultConfig {
        applicationId "de.j4velin.pedometer"
        multiDexEnabled true
    }

    signingConfigs {
        release
    }

    flavorDimensions "main"

    productFlavors {
        play {
            dimension "main"
        }
        fdroid {
            dimension "main"
            proguardFile 'proguard-project.txt'
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
        }
        debug {
            debuggable true
            signingConfig signingConfigs.release
            zipAlignEnabled true
            minifyEnabled false
        }
    }
}

repositories {
    jcenter()
    maven {
        url "https://maven.google.com"
    }
    maven { url "https://jitpack.io" }

}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    compile 'com.github.j4velin.colorpicker:colorpicker:1.2.3'
    compile 'com.github.j4velin.EazeGraph:EazeGraph:1.0.3'
    compile 'com.google.android.apps.dashclock:dashclock-api:2.0.0'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    compile 'com.android.support:preference-v7:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'

    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    compile project(':appsgeyser-sdk')
    compile 'com.google.android.gms:play-services-ads:11.0.4'
    compile 'com.google.android.gms:play-services-gcm:11.0.4'
    compile 'com.google.android.gms:play-services-location:11.0.4'
    compile 'com.danikula:videocache:2.7.0'
    compile 'com.android.support:multidex:1.0.3'
}

def props = new Properties()

if (project.file("key.properties").exists()) {
    props.load(new FileInputStream(project.file("key.properties")))
} else {
    logger.warn('Using sample keystore!!')
    props.load(new FileInputStream(project.file("key.properties.sample")))
}

android.signingConfigs.release.storeFile rootProject.file(props.keyStore)

android.signingConfigs.release.storePassword props.keyStorePassword

android.signingConfigs.release.keyAlias props.keyAlias

android.signingConfigs.release.keyPassword props.keyAliasPassword
